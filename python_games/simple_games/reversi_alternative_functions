    def __suggest_horizontal_move_right(self, initial_token_value, token_position, is_conquered=False):
        """Suggests a possible horizontal token move to the right from an initial token position.
        The token move is only valid if all conditions are true:
            -one or more enemy tokens are crossed
            -token move is still inside the game matrix
            -a free space is at the end of all crossed enemy tokens
            -no own token, except the initial token position, is crossed
        The first free space within the game matrix after all crossed enemy tokens is the suggested position.

        Parameters
        ----------
        initial_token_value : float
            Either 1.0 for a black token or 2.0 for a white token.
            Defines if it is a black token move or a white one.

        token_position : tuple
            Is a tuple of two integer values.
            First part of the tupel specifies in which row of the game matrix the token is located
            and the second part specifies the location of the column.

        is_conquered : bool
            Is initially false and remains false if no enemy token is crossed.
            Changes to true if one or more enemy tokens are crossed.

        Returns
        -------
        int
            If a valid token move suggestion is found it returns a value between 0 and 7.
            The value stands for the column index, where the suggested move is located.
            It returns -1 if no suggestion is possible.
        """
        if 8 > token_position[1] >= 0:
            token_value = self.game_matrix[token_position[0], token_position[1]]
            if token_value == 0.0 and is_conquered:
                return token_position[1]
            elif token_value == 0.0 and not is_conquered:
                return -1
            elif token_value == initial_token_value and is_conquered:
                return -1
            elif token_value == initial_token_value and not is_conquered:
                return self.__suggest_horizontal_move_right(initial_token_value,
                                                            (token_position[0], token_position[1] + 1), False)
            else:
                return self.__suggest_horizontal_move_right(initial_token_value,
                                                            (token_position[0], token_position[1] + 1), True)
        else:
            return -1

    def __suggest_horizontal_move_left(self, initial_token_value, token_position, is_conquered=False):
        """Suggests a possible horizontal token move to the left from an initial token position.
        The token move is only valid if all conditions are true:
            -one or more enemy tokens are crossed
            -token move is still inside the game matrix
            -a free space is at the end of all crossed enemy tokens
            -no own token, except the initial token position, is crossed
        The first free space within the game matrix after all crossed enemy tokens is the suggested position.

        Parameters
        ----------
        initial_token_value : float
            Either 1.0 for a black token or 2.0 for a white token.
            Defines if it is a black token move or a white one.

        token_position : tuple
            Is a tuple of two integer values.
            First part of the tuple specifies in which row of the game matrix the token is located
            and the second part specifies the column.

        is_conquered : bool
            Is initially false and remains false if no enemy token is crossed.
            Changes to true if one or more enemy tokens are crossed.

        Returns
        -------
        int
            If a valid token move suggestion is found it returns a value between 0 and 7.
            The value stands for the column index, where the suggested move is located.
            It returns -1 if no suggestion is possible.
        """
        if 8 > token_position[1] >= 0:
            token_value = self.game_matrix[token_position[0], token_position[1]]
            if token_value == 0.0 and is_conquered:
                return token_position[1]
            elif token_value == 0.0 and not is_conquered:
                return -1
            elif token_value == initial_token_value and is_conquered:
                return -1
            elif token_value == initial_token_value and not is_conquered:
                return self.__suggest_horizontal_move_left(initial_token_value,
                                                           (token_position[0], token_position[1] - 1), False)
            else:
                return self.__suggest_horizontal_move_left(initial_token_value,
                                                           (token_position[0], token_position[1] - 1), True)
        else:
            return -1

    def __suggest_horizontal_moves(self, token_position):
        """Suggests a possible horizontal token move to the left and to the right from an initial token position.

        Parameters
        ----------
        token_position : tuple
            Is a tuple of two integer values.
            First part of the tuple specifies in which row of the game matrix the token is located
            and the second part specifies the column.

        Returns
        -------
        list
            If no horizontal move suggestion is found then an empty list is returned.
            If just one horizontal suggestion of one direction is found
            then a list with one token position tuple is returned.
            If two horizontal move suggestions are found
            then a list of two token position tuples is returned.
            """
        token_value = self.game_matrix[token_position[0], token_position[1]]
        suggestion_horizontal_left = self.__suggest_horizontal_move_left(token_value,
                                                                         (token_position[0], token_position[1]))
        suggestion_horizontal_right = self.__suggest_horizontal_move_right(token_value,
                                                                           (token_position[0], token_position[1]))
        if suggestion_horizontal_left == -1 and suggestion_horizontal_right == -1:
            return []
        elif suggestion_horizontal_left == -1 and suggestion_horizontal_right != -1:
            return [(token_position[0], suggestion_horizontal_right)]
        elif suggestion_horizontal_left != -1 and suggestion_horizontal_right == -1:
            return [(token_position[0], suggestion_horizontal_left)]
        else:
            return [(token_position[0], suggestion_horizontal_left),
                    (token_position[0], suggestion_horizontal_right)]